-- Создание ролей в базе данных
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = 'admin_role') THEN
        CREATE ROLE admin_role;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = 'user_role') THEN
        CREATE ROLE user_role;
    END IF;
END
$$;

-- Создание пользователя для обычных пользователей (если нужно)
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = 'user1') THEN
        CREATE USER user1 WITH PASSWORD '123';
        GRANT user_role TO user1;
    END IF;
END
$$;

-- Предоставление прав postgres на admin_role
GRANT admin_role TO postgres;

-- Создание таблиц
CREATE TABLE IF NOT EXISTS Акционер (
    ID_акционера SERIAL PRIMARY KEY,
    ФИО_акционера VARCHAR(100) NOT NULL,
    Дата_рождения DATE,
    Паспортные_данные VARCHAR(20),
    Электронная_почта VARCHAR(100),
    Номер_телефона VARCHAR(20),
    Дата_регистрации TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS Ценные_бумаги (
    ID_пакета_акции SERIAL PRIMARY KEY,
    Название_ценной_бумаги VARCHAR(100) NOT NULL,
    Тип_ценной_бумаги VARCHAR(50) NOT NULL,
    Номинальная_стоимость DECIMAL(10, 2) NOT NULL,
    Количество_в_пакете_акций INTEGER NOT NULL
);

CREATE TABLE IF NOT EXISTS Владельцы_ценных_бумаг (
    ID_записи SERIAL PRIMARY KEY,
    ID_Акционера INTEGER REFERENCES Акционер(ID_акционера) ON DELETE CASCADE,
    Номер_пакета_акций INTEGER REFERENCES Ценные_бумаги(ID_пакета_акции) ON DELETE CASCADE,
    Дата_приобретения TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS Собрание_акционеров (
    ID_собрания SERIAL PRIMARY KEY,
    Повестка_дня TEXT NOT NULL,
    Дата DATE NOT NULL,
    Время_начала TIME,
    Время_окончания TIME
);

CREATE TABLE IF NOT EXISTS Присутствие (
    ID_записи SERIAL PRIMARY KEY,
    Номер_акционера INTEGER REFERENCES Акционер(ID_акционера) ON DELETE CASCADE,
    Присутствие VARCHAR(10) NOT NULL CHECK (Присутствие IN ('Да', 'Нет')),
    причина_собрания INTEGER REFERENCES Собрание_акционеров(ID_собрания) ON DELETE CASCADE,
    Примечание TEXT
);

CREATE TABLE IF NOT EXISTS Операция_с_акцией (
    ID_операции SERIAL PRIMARY KEY,
    ФИО_Продавца VARCHAR(100) NOT NULL,
    ФИО_Покупателя VARCHAR(100) NOT NULL,
    Время_сделки TIMESTAMP NOT NULL,
    Номер_пакета_акций INTEGER REFERENCES Ценные_бумаги(ID_пакета_акции) ON DELETE CASCADE
);

-- Создание функции для логирования операций с акциями
CREATE OR REPLACE FUNCTION log_stock_transfer() RETURNS TRIGGER AS $$
BEGIN
    IF OLD.ID_Акционера <> NEW.ID_Акционера THEN
        INSERT INTO Операция_с_акцией (ФИО_Продавца, ФИО_Покупателя, Время_сделки, Номер_пакета_акций)
        SELECT 
            a_old.ФИО_акционера,
            a_new.ФИО_акционера,
            CURRENT_TIMESTAMP,
            NEW.Номер_пакета_акций
        FROM 
            Акционер a_old,
            Акционер a_new
        WHERE 
            a_old.ID_акционера = OLD.ID_Акционера AND
            a_new.ID_акционера = NEW.ID_Акционера;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Создание триггера для логирования операций
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'stock_transfer_trigger') THEN
        CREATE TRIGGER stock_transfer_trigger
        AFTER UPDATE ON Владельцы_ценных_бумаг
        FOR EACH ROW
        EXECUTE FUNCTION log_stock_transfer();
    END IF;
END
$$;

-- Предоставление прав на таблицы
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO admin_role;
GRANT SELECT, INSERT, UPDATE ON TABLE Акционер TO user_role;
GRANT SELECT ON TABLE Ценные_бумаги TO user_role;
GRANT SELECT ON TABLE Владельцы_ценных_бумаг TO user_role;
GRANT SELECT ON TABLE Собрание_акционеров TO user_role;
GRANT SELECT, INSERT, UPDATE ON TABLE Присутствие TO user_role;
GRANT SELECT ON TABLE Операция_с_акцией TO user_role;

-- Предоставление прав на последовательности
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO admin_role;
GRANT USAGE, SELECT ON SEQUENCE Акционер_ID_акционера_seq TO user_role;
GRANT USAGE, SELECT ON SEQUENCE Присутствие_ID_записи_seq TO user_role;

-- Вставка примерных данных (только если таблицы пустые)
DO $$
BEGIN
    -- Акционеры
    IF NOT EXISTS (SELECT 1 FROM Акционер) THEN
        INSERT INTO Акционер (ФИО_акционера, Дата_рождения, Паспортные_данные, Электронная_почта, Номер_телефона)
        VALUES 
            ('Иванов Иван Иванович', '1980-05-15', '4510 123456', 'ivanov@example.com', '+7 (900) 123-45-67'),
            ('Петров Петр Петрович', '1975-10-20', '4511 654321', 'petrov@example.com', '+7 (900) 765-43-21'),
            ('Сидорова Анна Сергеевна', '1990-03-08', '4512 345678', 'sidorova@example.com', '+7 (900) 234-56-78'),
            ('Смирнов Алексей Дмитриевич', '1985-12-03', '4513 876543', 'smirnov@example.com', '+7 (900) 876-54-32'),
            ('Козлова Ольга Викторовна', '1982-07-25', '4514 567890', 'kozlova@example.com', '+7 (900) 345-67-89'),
            ('Новиков Дмитрий Александрович', '1978-08-12', '4515 678901', 'novikov@example.com', '+7 (900) 456-78-90'),
            ('Морозова Елена Игоревна', '1989-04-03', '4516 789012', 'morozova@example.com', '+7 (900) 567-89-01'),
            ('Волков Сергей Николаевич', '1973-11-25', '4517 890123', 'volkov@example.com', '+7 (900) 678-90-12'),
            ('Кузнецова Мария Владимировна', '1992-06-17', '4518 901234', 'kuznetsova@example.com', '+7 (900) 789-01-23'),
            ('Соколов Александр Петрович', '1981-09-30', '4519 012345', 'sokolov@example.com', '+7 (900) 890-12-34');
    END IF;

    -- Ценные бумаги
    IF NOT EXISTS (SELECT 1 FROM Ценные_бумаги) THEN
        INSERT INTO Ценные_бумаги (Название_ценной_бумаги, Тип_ценной_бумаги, Номинальная_стоимость, Количество_в_пакете_акций)
        VALUES 
            ('Акция АО "Компания"', 'Обычная', 1000.00, 100),
            ('Акция АО "Компания"', 'Обычная', 1000.00, 50),
            ('Акция АО "Компания"', 'Привилегированная', 1500.00, 25),
            ('Акция АО "Компания"', 'Привилегированная', 1500.00, 10),
            ('Акция АО "Компания"', 'Обычная', 1000.00, 200),
            ('Акция АО "Компания"', 'Обычная', 1000.00, 75),
            ('Акция АО "Компания"', 'Привилегированная', 1500.00, 15),
            ('Акция АО "Компания"', 'Обычная', 1000.00, 150),
            ('Акция АО "Компания"', 'Привилегированная', 1500.00, 30),
            ('Акция АО "Компания"', 'Обычная', 1000.00, 125);
    END IF;

    -- Владельцы ценных бумаг
    IF NOT EXISTS (SELECT 1 FROM Владельцы_ценных_бумаг) THEN
        INSERT INTO Владельцы_ценных_бумаг (ID_Акционера, Номер_пакета_акций)
        VALUES 
            (1, 1),
            (2, 2),
            (3, 3),
            (4, 4),
            (5, 5),
            (6, 6),
            (7, 7),
            (8, 8),
            (9, 9),
            (10, 10);
    END IF;

    -- Собрания акционеров
    IF NOT EXISTS (SELECT 1 FROM Собрание_акционеров) THEN
        INSERT INTO Собрание_акционеров (Повестка_дня, Дата)
        VALUES 
            ('Утверждение годового отчета, выборы генерального директора', '2023-04-15'),
            ('Распределение прибыли и дивидендов', '2023-07-20'),
            ('Изменение устава компании', '2023-10-10'),
            ('Стратегия развития на 2024 год', '2023-12-05'),
            ('Выборы совета директоров', '2024-02-18'),
            ('Одобрение сделки с заинтересованностью', '2024-03-25'),
            ('Утверждение аудитора компании', '2024-05-10'),
            ('Реорганизация компании', '2024-06-15'),
            ('Промежуточные дивиденды за 1 полугодие', '2024-08-20'),
            ('Внеочередное собрание по вопросу выпуска облигаций', '2024-09-30');
    END IF;

    -- Записи о присутствии
    IF NOT EXISTS (SELECT 1 FROM Присутствие) THEN
        -- Первое собрание
        INSERT INTO Присутствие (Номер_акционера, Присутствие, причина_собрания)
        VALUES 
            (1, 'Да', 1), (2, 'Да', 1), (3, 'Нет', 1), (4, 'Да', 1), (5, 'Да', 1),
            (6, 'Нет', 1), (7, 'Да', 1), (8, 'Да', 1), (9, 'Нет', 1), (10, 'Да', 1);
            
        -- Второе собрание
        INSERT INTO Присутствие (Номер_акционера, Присутствие, причина_собрания)
        VALUES 
            (1, 'Нет', 2), (2, 'Да', 2), (3, 'Да', 2), (4, 'Нет', 2), (5, 'Да', 2),
            (6, 'Да', 2), (7, 'Нет', 2), (8, 'Да', 2), (9, 'Да', 2), (10, 'Нет', 2);
            
        -- Третье собрание
        INSERT INTO Присутствие (Номер_акционера, Присутствие, причина_собрания)
        VALUES 
            (1, 'Да', 3), (2, 'Да', 3), (3, 'Да', 3), (4, 'Да', 3), (5, 'Нет', 3),
            (6, 'Да', 3), (7, 'Да', 3), (8, 'Нет', 3), (9, 'Да', 3), (10, 'Да', 3);
            
        -- Четвертое собрание
        INSERT INTO Присутствие (Номер_акционера, Присутствие, причина_собрания)
        VALUES 
            (1, 'Да', 4), (2, 'Нет', 4), (3, 'Да', 4), (4, 'Да', 4), (5, 'Да', 4),
            (6, 'Нет', 4), (7, 'Да', 4), (8, 'Да', 4), (9, 'Нет', 4), (10, 'Да', 4);
    END IF;

    -- Операции с акциями
    IF NOT EXISTS (SELECT 1 FROM Операция_с_акцией) THEN
        INSERT INTO Операция_с_акцией (ФИО_Продавца, ФИО_Покупателя, Время_сделки, Номер_пакета_акций)
        VALUES 
            ('Иванов Иван Иванович', 'Сидорова Анна Сергеевна', '2023-02-10 10:30:00', 1),
            ('Петров Петр Петрович', 'Смирнов Алексей Дмитриевич', '2023-03-15 14:45:00', 2),
            ('Сидорова Анна Сергеевна', 'Козлова Ольга Викторовна', '2023-05-20 11:15:00', 3),
            ('Смирнов Алексей Дмитриевич', 'Иванов Иван Иванович', '2023-06-25 16:00:00', 4),
            ('Козлова Ольга Викторовна', 'Петров Петр Петрович', '2023-08-30 09:20:00', 5),
            ('Новиков Дмитрий Александрович', 'Морозова Елена Игоревна', '2023-09-12 13:40:00', 6),
            ('Морозова Елена Игоревна', 'Волков Сергей Николаевич', '2023-10-05 15:30:00', 7),
            ('Волков Сергей Николаевич', 'Кузнецова Мария Владимировна', '2023-11-15 10:15:00', 8),
            ('Кузнецова Мария Владимировна', 'Соколов Александр Петрович', '2023-12-20 14:20:00', 9),
            ('Соколов Александр Петрович', 'Новиков Дмитрий Александрович', '2024-01-10 11:45:00', 10);
    END IF;
END
$$;

-- Создание представления для отображения акционеров и их акций
CREATE OR REPLACE VIEW Акционеры_и_Акции AS
SELECT 
    a.ID_акционера,
    a.ФИО_акционера,
    a.Паспортные_данные,
    c.ID_пакета_акции,
    c.Название_ценной_бумаги,
    c.Тип_ценной_бумаги,
    c.Номинальная_стоимость,
    c.Количество_в_пакете_акций,
    (c.Номинальная_стоимость * c.Количество_в_пакете_акций) AS Общая_стоимость
FROM 
    Акционер a
JOIN 
    Владельцы_ценных_бумаг b ON a.ID_акционера = b.ID_Акционера
JOIN 
    Ценные_бумаги c ON b.Номер_пакета_акций = c.ID_пакета_акции;

-- Создание представления для отображения посещаемости собраний
CREATE OR REPLACE VIEW Посещаемость_собраний AS
SELECT 
    s.ID_собрания,
    s.Повестка_дня,
    s.Дата,
    COUNT(CASE WHEN p.Присутствие = 'Да' THEN 1 END) AS Количество_присутствующих,
    COUNT(p.ID_записи) AS Общее_количество_акционеров,
    ROUND((COUNT(CASE WHEN p.Присутствие = 'Да' THEN 1 END)::numeric / COUNT(p.ID_записи)) * 100, 2) AS Процент_посещаемости
FROM 
    Собрание_акционеров s
LEFT JOIN 
    Присутствие p ON s.ID_собрания = p.причина_собрания
GROUP BY 
    s.ID_собрания, s.Повестка_дня, s.Дата;

-- Предоставление прав на представления
GRANT SELECT ON Акционеры_и_Акции TO admin_role, user_role;
GRANT SELECT ON Посещаемость_собраний TO admin_role, user_role;

-- Комментарии к таблицам
COMMENT ON TABLE Акционер IS 'Таблица для хранения информации об акционерах компании';
COMMENT ON TABLE Ценные_бумаги IS 'Таблица для хранения информации о пакетах акций компании';
COMMENT ON TABLE Владельцы_ценных_бумаг IS 'Таблица связи между акционерами и принадлежащими им пакетами акций';
COMMENT ON TABLE Собрание_акционеров IS 'Таблица для хранения информации о собраниях акционеров';
COMMENT ON TABLE Присутствие IS 'Таблица для учета присутствия акционеров на собраниях';
COMMENT ON TABLE Операция_с_акцией IS 'Таблица для учета операций передачи акций между акционерами';